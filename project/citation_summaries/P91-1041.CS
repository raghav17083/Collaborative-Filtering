The unification algorithm used by the current system is a modification of Tomabechi's (Tomabechi, 1991) "quasi-destructive" unification algorithm. 
But even with good implementations of the best of these improved algorithms, parsers designed for wide-coverage unification-based phrase-structure grammars using large HPSG-style feature graphs spend around 85-90% of their time unifying and copying feature structures (Tomabechi, 1991), and may allocate in the region of 1-2 Mbytes memory while parsing sentences of only eight words or so (Flickinger, p.c.). 
One approach to this problem is to refine parsing algorithms by developing techniques such as restrictions, structure-sharing, and lazy unification that reduce the amount of structure that is stored and hence the need for copying of features structures (Shieber, 1985; Pereira, 1985; Karttunen and Kay, 1985; Wroblewski, 1987; Gerdemann, 1989; Godden, 1990; Kogure, 1990; Emele, 1991; Tomabechi, 1991; Harrison and Ellison, 1992)). 
2 Efficient Subsumption and Equivalence Algorithms Our feature structure subsumption algorithm 2 assumes totally well-typed structures (Carpenter, 1992) and employs similar machinery to the quasi-destructive unification algorithm described by Tomabechi (1991). 
5 Related Work We reduce memory consumption of graph unication as presented in (Tomabechi, 1991) (or (Wroblewski, 1987)) by separating scratch elds from node structures. 
