The algorithm for addition of strings can be seen as an extension to cyclic automata of the algorithm for unsorted data, the second algorithm in Daciuk et al, (2000). 
As suggested by one of the reviewers of this article, an improvement in efficiency may be obtained by realizing that, in many cases, cloned states corresponding to the shortest prefixes of string w are not affected by minimization, because their intact equivalents have become unreachable and therefore have been removed from the register; the solution lies in identifying these states and not cloning them (for example, Daciuk et al.s [2000] and Revuzs [2000] algorithms do not clone them). 
It turns out that not only the algorithm for unsorted data (the second algorithm in Daciuk et al. [2000]), but also the algorithm for sorted data (the first one in that article) can be extended in the same way. 
(2000) is the same as that between the algorithm for adding strings in Carrasco and Forcada (2002) and the second algoritm in Daciuk et al. 
It is not difficult to show that minimization may be performed by initializing a list R called the register (Daciuk et al. 2000) with all of the intact states and then testing, one by one, queue and cloned states (starting with the last queue state (, w) or, if it does not exist, the last clone state (q, w), and descending in Pr(w)) against states in the register and adding them to the register if they are not found to be equivalent to a state in R. 
