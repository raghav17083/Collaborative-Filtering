# -*- coding: utf-8 -*-
"""KernelKmeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1putl7JYI7b0yBfVW0fapvt9aIyjraveS
"""

import pandas as pd
import numpy as np
import pickle
from tqdm import tqdm
from sklearn.model_selection import KFold
from sklearn.metrics import pairwise_distances
from collections import Counter
from sklearn.model_selection import KFold
from sklearn import preprocessing 
from scipy.spatial import distance
import math
from sklearn import preprocessing

import pandas as pd
import numpy as np


class paper:
  def __init__(self,pid, ID, title, year):
    self.pid = pid
    self.ID = ID
    self.title = title
    self.year = year
    
papers={}

with open("/content/drive/MyDrive/datasets_inUse/paper_ids.txt","r", encoding="utf8") as file:
    pid=0
    for i in file.readlines():
        l=i.split()
        # making the entire title sentence
        title=' '.join(l[1:len(l)-1])
        # paper id pid is increasing values of 1 with eveyr loop
        papers[l[0]]=paper(pid, l[0], title, l[-1])
        pid+=1


#Number of papers in total
nop=len(papers)

""""Paper Citation matrix"""

def paper_citation_matrix():
    with open("/content/drive/MyDrive/datasets_inUse/paper-citation-network-nonself.txt",'r') as file:
        matrix=np.zeros((nop,nop))
        for i in tqdm(file.readlines()):
            l=i.split()
            #print(papers[l[0]].pid," " , papers[l[2]].pid," -------------------")
            matrix[papers[l[0]].pid,papers[l[2]].pid]=1
    return matrix






matrix=paper_citation_matrix()
# np.save("matrix", matrix)
print(matrix.shape)
data=pd.DataFrame(matrix)
print(data.shape)

from sklearn.metrics import pairwise_distances
from scipy.spatial.distance import cosine



cosine_arr=1-pairwise_distances(matrix, metric="cosine")
tau=0.4 
k = 5
topKindex =[]

for POI_ID in ['P10-1142','W11-2165']:

    poi_index=papers[POI_ID].pid
    POI_sim = cosine_arr[POI_INDEX]
    
    Similar_tupples = [i[0] for i in sorted(enumerate(myList), key=lambda x:x[1])][::-1]

    count =1
    for (x,y) in Similar_tupples:
        if(count==k):
            break
        else:
            if(y>tau):
                topKindex.append(x)
                count+=1

    
    print("Index of paper of Interest- ", POI_INDEX)
    print("Papers Recommended for Paper ID- ", POI_ID)
    print("Title- " , papers[POI_ID].title)
    for pid in topKindex:
      for j in papers:
        if(papers[j].pid==pid):
              print(i+1, ". ", papers[j].title , " " , j)



