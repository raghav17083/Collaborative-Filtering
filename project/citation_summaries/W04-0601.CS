In anticipation of the present work, Foster and White (2004) generated disjunctive logical forms during sentence planning, then (as a stopgap measure) multiplied out the disjunctions and sequentially realized the top-level alternatives until an overall time limit was reached. 
Our approach places us squarely in the full generation camp, but there is a continuum: Using the approach to including canned text as proposed in [Foster and White, 2004], we can freely position the actual planner between full generation and pre-baked generation. 
<utterance> <utt topic="music" polarity="dislike" opp-polarity="like" so="no" right="no" also="no" well="yes" and="no" but="no"> <pred adj="bad"/> <opp-pred adj="good"/> </utt> </utterance> Figure 1: Simple Utterance Specification 6.3 OPENCCG Logical Forms Following the method described in Foster and White (2004), the basic utterance specification is transformed, using stylesheets written in the XSL transformation language, into an OPENCCG logical form. 
[Foster and White, 2004]. 
In COMIC, the sentence planner uses XSLT to generate disjunctive logical forms (LFs), which specify a range of possible paraphrases in a nested free-choice form (Foster and White, 2004). 
